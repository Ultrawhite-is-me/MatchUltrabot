import logging
from telegram import Update, KeyboardButton, ReplyKeyboardMarkup, InputMediaPhoto
from telegram.ext import (ApplicationBuilder, CommandHandler, MessageHandler,
                          filters, ContextTypes, ConversationHandler)
import sqlite3
import os

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
conn = sqlite3.connect('database.db', check_same_thread=False)
cursor = conn.cursor()

# –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü
cursor.execute('''
CREATE TABLE IF NOT EXISTS users (
    user_id INTEGER PRIMARY KEY,
    username TEXT,
    name TEXT,
    age INTEGER,
    photos TEXT,
    short_description TEXT,
    full_description TEXT,
    location TEXT
)
''')

cursor.execute('''
CREATE TABLE IF NOT EXISTS likes (
    user_id INTEGER,
    liked_user_id INTEGER
)
''')

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏–π ConversationHandler
NAME, AGE, PHOTOS, SHORT_DESC, FULL_DESC, LOCATION = range(6)
LIKES_SHOWING = 6

# –ü–∞–ø–∫–∞ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
PHOTO_DIR = 'photos'
if not os.path.exists(PHOTO_DIR):
    os.makedirs(PHOTO_DIR)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –∑–Ω–∞–∫–æ–º—Å—Ç–≤. –î–∞–≤–∞–π —Å–æ–∑–¥–∞–¥–∏–º —Ç–≤–æ—é –∞–Ω–∫–µ—Ç—É. –ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?"
    )
    return NAME

# –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async def get_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['name'] = update.message.text
    await update.message.reply_text("–°–∫–æ–ª—å–∫–æ —Ç–µ–±–µ –ª–µ—Ç?")
    return AGE

async def get_age(update: Update, context: ContextTypes.DEFAULT_TYPE):
    age = update.message.text
    if not age.isdigit():
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –≤–æ–∑—Ä–∞—Å—Ç–∞.")
        return AGE
    context.user_data['age'] = int(age)
    await update.message.reply_text("–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Ç—Ä–∏ —Ç–≤–æ–∏—Ö —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –ø–æ –æ—á–µ—Ä–µ–¥–∏.")
    context.user_data['photos'] = []
    return PHOTOS

async def get_photos(update: Update, context: ContextTypes.DEFAULT_TYPE):
    photo_file = await update.message.photo[-1].get_file()
    photo_path = f'{PHOTO_DIR}/{update.message.from_user.id}_{len(context.user_data["photos"])}.jpg'
    
    await photo_file.download_to_drive(photo_path)
    
    context.user_data['photos'].append(photo_path)
    if len(context.user_data['photos']) < 3:
        await update.message.reply_text(f"–§–æ—Ç–æ {len(context.user_data['photos'])} –ø–æ–ª—É—á–µ–Ω–æ, –∂–¥—É –µ—â–µ {3 - len(context.user_data['photos'])} —Ñ–æ—Ç–æ(–∞).")
        return PHOTOS
    else:
        await update.message.reply_text("–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å –∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –æ —Å–µ–±–µ (–º–∞–∫—Å–∏–º—É–º 50 —Å–∏–º–≤–æ–ª–æ–≤)")
        return SHORT_DESC

async def get_short_desc(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['short_description'] = update.message.text[:50]  # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –¥–æ 50 —Å–∏–º–≤–æ–ª–æ–≤
    await update.message.reply_text("–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å –ø–æ–ª–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –æ —Å–µ–±–µ (–º–∞–∫—Å–∏–º—É–º 300 —Å–∏–º–≤–æ–ª–æ–≤)")
    return FULL_DESC

async def get_full_desc(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['full_description'] = update.message.text[:300]  # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –¥–æ 300 —Å–∏–º–≤–æ–ª–æ–≤
    await update.message.reply_text("–û—Ç–ø—Ä–∞–≤—å —Å–≤–æ—é –≥–µ–æ–ø–æ–∑–∏—Ü–∏—é.")
    return LOCATION

async def get_location(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.location:
        location = f"{update.message.location.latitude},{update.message.location.longitude}"
    else:
        location = update.message.text
    context.user_data['location'] = location

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –±–∞–∑—É
    cursor.execute('''
    INSERT OR REPLACE INTO users (user_id, username, name, age, photos, short_description, full_description, location)
    VALUES (?, ?, ?, ?, ?, ?, ?, ?)
    ''', (
        update.message.from_user.id,
        update.message.from_user.username,
        context.user_data['name'],
        context.user_data['age'],
        ','.join(context.user_data['photos']),
        context.user_data['short_description'],
        context.user_data['full_description'],
        context.user_data['location']
    ))
    conn.commit()

    await update.message.reply_text("–¢–≤–æ—è –∞–Ω–∫–µ—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞! –¢–µ–ø–µ—Ä—å —Ç—ã –º–æ–∂–µ—à—å —Å–º–æ—Ç—Ä–µ—Ç—å –∞–Ω–∫–µ—Ç—ã –¥—Ä—É–≥–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /search.")
    return ConversationHandler.END

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–∏—Å–∫–∞ –∞–Ω–∫–µ—Ç
async def search(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫—Ä–æ–º–µ —Ç–µ–∫—É—â–µ–≥–æ
    cursor.execute('SELECT user_id, name, age, photos, short_description, full_description, location FROM users WHERE user_id != ?', (user_id,))
    users = cursor.fetchall()
    if not users:
        await update.message.reply_text("–ü–æ–∫–∞ –Ω–µ—Ç –¥—Ä—É–≥–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
        return
    context.user_data['search_results'] = users
    context.user_data['current_index'] = 0
    await context.bot.send_message(
        chat_id=update.effective_chat.id,
        text="–ü–æ–ª–µ—Ç–µ–ª–∏",
        reply_markup=ReplyKeyboardMarkup(
            [['‚ù§Ô∏è –õ–∞–π–∫', 'üîç –ü–æ–¥—Ä–æ–±–Ω–µ–µ', '‚û°Ô∏è –î–∞–ª–µ–µ']],
            one_time_keyboard=False,
            resize_keyboard=True
        )
    )
    await show_profile(update, context)

async def show_profile(update: Update, context: ContextTypes.DEFAULT_TYPE):
    index = context.user_data['current_index']
    users = context.user_data['search_results']
    if index >= len(users):
        await update.message.reply_text("–ë–æ–ª—å—à–µ –Ω–µ—Ç –∞–Ω–∫–µ—Ç, –ø–æ—à–ª–∏ –ø–æ –Ω–æ–≤–æ–π")
        await search(update, context)  # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–∏—Å–∫ –∑–∞–Ω–æ–≤–æ
        return
    user = users[index]
    user_photos = user[3].split(',')

    await context.bot.send_photo(
        chat_id=update.effective_chat.id,
        photo=open(user_photos[0], 'rb'),
        caption=f"{user[1]} ({user[2]})\n{user[4]}",
    )

# –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–ª–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å
async def show_full_profile(update: Update, context: ContextTypes.DEFAULT_TYPE):
    index = context.user_data['current_index']
    users = context.user_data['search_results']

    user = users[index]
    user_photos = user[3].split(',')
    user_location = user[6]
    full_description = user[5]

    # –°–æ–∑–¥–∞–µ–º –º–µ–¥–∏–∞-–≥—Ä—É–ø–ø—É –¥–ª—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
    media_group = []
    for i, photo in enumerate(user_photos):
        if i < 3:
            if i == 0:
                media_group.append(InputMediaPhoto(
                    media=open(photo, 'rb'),
                    caption=f"{user[1]} ({user[2]})\n{full_description}"
                ))
            else:
                media_group.append(InputMediaPhoto(media=open(photo, 'rb')))

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
    await context.bot.send_message(
        chat_id=update.effective_chat.id,
        text="–í–æ—Ç –ø–æ–ª–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å",
        reply_markup=ReplyKeyboardMarkup(
            [['‚ù§Ô∏è –õ–∞–π–∫', '‚û°Ô∏è –î–∞–ª–µ–µ', '‚ùóÔ∏è–ü–æ–∂–∞–ª–æ–≤–∞—Ç—å—Å—è']],
            one_time_keyboard=False,
            resize_keyboard=True
        )
    )

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–µ–¥–∏–∞-–≥—Ä—É–ø–ø—É
    if media_group:
        await update.message.reply_media_group(media=media_group)

# –õ–∞–π–∫
async def handle_like_next(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    index = context.user_data.get('current_index', 0)
    users = context.user_data.get('search_results', [])
    if not users:
        await update.message.reply_text("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞–Ω–∫–µ—Ç.")
        return

    if index >= len(users):
        await update.message.reply_text("–ë–æ–ª—å—à–µ –Ω–µ—Ç –∞–Ω–∫–µ—Ç, –ø–æ—à–ª–∏ –ø–æ –Ω–æ–≤–æ–π")
        await search(update, context)
        return

    current_user = users[index]
    if text == '‚ù§Ô∏è –õ–∞–π–∫':
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ª–∞–π–∫ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        cursor.execute('INSERT INTO likes (user_id, liked_user_id) VALUES (?, ?)', (
            update.message.from_user.id,
            current_user[0]
        ))
        conn.commit()
        await update.message.reply_text("–í—ã –ø–æ—Å—Ç–∞–≤–∏–ª–∏ –ª–∞–π–∫!")

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –≤–∑–∞–∏–º–Ω—ã–π –ª–∞–π–∫
        cursor.execute('SELECT * FROM likes WHERE user_id = ? AND liked_user_id = ?', (
            current_user[0],
            update.message.from_user.id
        ))
        if cursor.fetchone():
            # –í–∑–∞–∏–º–Ω—ã–π –ª–∞–π–∫
            await update.message.reply_text("–£ –≤–∞—Å –≤–∑–∞–∏–º–Ω–∞—è —Å–∏–º–ø–∞—Ç–∏—è!")
            await context.bot.send_message(chat_id=current_user[0], text="–£ –≤–∞—Å –≤–∑–∞–∏–º–Ω–∞—è —Å–∏–º–ø–∞—Ç–∏—è!")

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫–∏ –Ω–∞ –ø—Ä–æ—Ñ–∏–ª–∏ –¥—Ä—É–≥ –¥—Ä—É–≥–∞
            await send_profile_link(update.message.from_user.id, current_user[0], context)
            await send_profile_link(current_user[0], update.message.from_user.id, context)
        else:
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –¥—Ä—É–≥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ –Ω–æ–≤–æ–º –ª–∞–π–∫–µ
            await notify_liked_user(update, context, current_user[0])

    elif text == '‚û°Ô∏è –î–∞–ª–µ–µ':
        context.user_data['current_index'] += 1
        await show_profile(update, context)
        return
    elif text == 'üîç –ü–æ–¥—Ä–æ–±–Ω–µ–µ':
        await show_full_profile(update, context)
        return
    else:
        await update.message.reply_text("–¢–∞–∫–æ–π –æ–ø—Ü–∏–∏ –Ω–µ—Ç")
        return
    context.user_data['current_index'] += 1
    await show_profile(update, context)

async def notify_liked_user(update: Update, context: ContextTypes.DEFAULT_TYPE, liked_user_id):
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    try:
        await context.bot.send_message(
            chat_id=liked_user_id,
            text="–£ –≤–∞—Å –Ω–æ–≤—ã–π –ª–∞–π–∫! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /likes, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å, –∫—Ç–æ –ª–∞–π–∫–Ω—É–ª –≤–∞—Å."
        )
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")

async def send_profile_link(to_user_id, profile_user_id, context):
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è
    cursor.execute('SELECT name, username FROM users WHERE user_id = ?', (profile_user_id,))
    user = cursor.fetchone()
    if user:
        name, username = user
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –ø—Ä–æ—Ñ–∏–ª—å
        profile_link = f"https://t.me/{username}" if username else f"tg://user?id={profile_user_id}"
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await context.bot.send_message(
            chat_id=to_user_id,
            text=f'–£–¥–∞—á–Ω–æ–≥–æ –æ–±—â–µ–Ω–∏—è! üëâ <a href="{profile_link}">{name}</a>',
            parse_mode='HTML'
        )
    else:
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
        await context.bot.send_message(
            chat_id=to_user_id,
            text='–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω.'
        )

# –ö–æ–º–∞–Ω–¥–∞ /likes –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ª–∞–π–∫–æ–≤
async def likes(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    cursor.execute('SELECT user_id FROM likes WHERE liked_user_id = ?', (user_id,))
    likers = cursor.fetchall()

    if not likers:
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –ª–∞–π–∫–æ–≤.")
        return ConversationHandler.END

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö, –∫–æ—Ç–æ—Ä—ã–µ –ª–∞–π–∫–Ω—É–ª–∏
    liker_ids = [liker[0] for liker in likers]
    cursor.execute('SELECT user_id, name, age, photos, short_description FROM users WHERE user_id IN ({})'.format(','.join('?' * len(liker_ids))), liker_ids)
    users = cursor.fetchall()

    if not users:
        await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –ª–∞–π–∫–Ω—É–ª–∏ –≤–∞—Å.")
        return ConversationHandler.END

    context.user_data['likers'] = users
    context.user_data['likers_index'] = 0
    await context.bot.send_message(
        chat_id=update.effective_chat.id,
        text="–í–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏, –∫–æ—Ç–æ—Ä—ã–º –≤—ã –ø–æ–Ω—Ä–∞–≤–∏–ª–∏—Å—å",
        reply_markup=ReplyKeyboardMarkup(
            [['‚ù§Ô∏è –õ–∞–π–∫', '‚û°Ô∏è –î–∞–ª–µ–µ']],
            one_time_keyboard=False,
            resize_keyboard=True
        )
    )
    await show_liker_profile(update, context)
    return LIKES_SHOWING

async def show_liker_profile(update: Update, context: ContextTypes.DEFAULT_TYPE):
    index = context.user_data['likers_index']
    users = context.user_data['likers']
    if index >= len(users):
        await update.message.reply_text("–ë–æ–ª—å—à–µ –Ω–µ—Ç –ª–∞–π–∫–æ–≤.")
        return ConversationHandler.END
    user = users[index]
    user_photos = user[3].split(',')

    await context.bot.send_photo(
        chat_id=update.effective_chat.id,
        photo=open(user_photos[0], 'rb'),
        caption=f"{user[1]} ({user[2]})\n{user[4]}",
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ª–∞–π–∫–æ–≤ –≤ —Ä–∞–∑–¥–µ–ª–µ /likes
async def handle_like_back(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    index = context.user_data.get('likers_index', 0)
    users = context.user_data.get('likers', [])
    if not users:
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –ª–∞–π–∫–æ–≤.")
        return ConversationHandler.END

    if index >= len(users):
        await update.message.reply_text("–ë–æ–ª—å—à–µ –Ω–µ—Ç –ª–∞–π–∫–æ–≤.")
        return ConversationHandler.END

    current_user = users[index]
    if text == '‚ù§Ô∏è –õ–∞–π–∫':
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ª–∞–π–∫ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        cursor.execute('INSERT INTO likes (user_id, liked_user_id) VALUES (?, ?)', (
            update.message.from_user.id,
            current_user[0]
        ))
        conn.commit()
        #await update.message.reply_text("–í—ã –ø–æ—Å—Ç–∞–≤–∏–ª–∏ –ª–∞–π–∫!")

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –≤–∑–∞–∏–º–Ω—ã–π –ª–∞–π–∫
        cursor.execute('SELECT * FROM likes WHERE user_id = ? AND liked_user_id = ?', (
            current_user[0],
            update.message.from_user.id
        ))
        if cursor.fetchone():
            # –í–∑–∞–∏–º–Ω—ã–π –ª–∞–π–∫
            await update.message.reply_text("–£ –≤–∞—Å –≤–∑–∞–∏–º–Ω–∞—è —Å–∏–º–ø–∞—Ç–∏—è!")
            await context.bot.send_message(chat_id=current_user[0], text="–£ –≤–∞—Å –≤–∑–∞–∏–º–Ω–∞—è —Å–∏–º–ø–∞—Ç–∏—è!")

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫–∏ –Ω–∞ –ø—Ä–æ—Ñ–∏–ª–∏ –¥—Ä—É–≥ –¥—Ä—É–≥–∞
            await send_profile_link(update.message.from_user.id, current_user[0], context)
            await send_profile_link(current_user[0], update.message.from_user.id, context)
    elif text == '‚û°Ô∏è –î–∞–ª–µ–µ':
        context.user_data['likers_index'] += 1
        await show_liker_profile(update, context)
        return LIKES_SHOWING
    else:
        await update.message.reply_text("–¢–∞–∫–æ–π –æ–ø—Ü–∏–∏ –Ω–µ—Ç")
        return LIKES_SHOWING

    context.user_data['likers_index'] += 1
    await show_liker_profile(update, context)
    return LIKES_SHOWING

# –î–æ–±–∞–≤—å—Ç–µ —ç—Ç—É —Ñ—É–Ω–∫—Ü–∏—é –ø–µ—Ä–µ–¥ —Ñ—É–Ω–∫—Ü–∏–µ–π main()

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–º–µ–Ω—è–µ—Ç –∏ –∑–∞–≤–µ—Ä—à–∞–µ—Ç —Ä–∞–∑–≥–æ–≤–æ—Ä."""
    await update.message.reply_text(
        '–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.'
    )
    return ConversationHandler.END

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∏ –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞
def main():
    application = ApplicationBuilder().token('YOUR_BOT_TOKEN_HERE').build()

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler('start', start)],
        states={
            NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_name)],
            AGE: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_age)],
            PHOTOS: [MessageHandler(filters.PHOTO, get_photos)],
            SHORT_DESC: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_short_desc)],
            FULL_DESC: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_full_desc)],
            LOCATION: [MessageHandler((filters.LOCATION | filters.TEXT) & ~filters.COMMAND, get_location)],
        },
        fallbacks=[CommandHandler('cancel', cancel)]
    )

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∏ –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞
def main():
    application = ApplicationBuilder().token('7023423273:AAGItyStfMF2jYzTMpoOgj2WJbiw0zb-xw0').build()

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler('start', start)],
        states={
            NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_name)],
            AGE: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_age)],
            PHOTOS: [MessageHandler(filters.PHOTO, get_photos)],
            SHORT_DESC: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_short_desc)],
            FULL_DESC: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_full_desc)],
            LOCATION: [MessageHandler((filters.LOCATION | filters.TEXT) & ~filters.COMMAND, get_location)],
        },
        fallbacks=[CommandHandler('cancel', cancel)]
    )

    likes_handler = ConversationHandler(
        entry_points=[CommandHandler('likes', likes)],
        states={
            LIKES_SHOWING: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_like_back)],
        },
        fallbacks=[CommandHandler('cancel', cancel)]
    )

    application.add_handler(conv_handler)
    application.add_handler(likes_handler)
    application.add_handler(CommandHandler('search', search))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_like_next))

    application.run_polling()

if __name__ == '__main__':
    main()
